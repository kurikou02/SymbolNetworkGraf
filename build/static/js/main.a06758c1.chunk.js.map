{"version":3,"sources":["components/NetworkGraph.tsx","components/Title.tsx","components/ElementDetailInfo.tsx","components/FormDialog.tsx","symbol/SymbolManager.tsx","hooks/useWindowSize.tsx","components/Dashboard.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["stylesheet","NetworkGraph","_ref","elements","isProgress","graphCanvasSize","getElement","console","log","useTheme","_React$useState","React","useState","_React$useState2","_slicedToArray","graphLayoutType","setGraphLayoutType","layout1","name","fit","animate","_React$useState3","width","height","_React$useState4","canvasSize","setCanvasSize","useEffect","tappedElement","event","data","target","_jsx","Box","sx","mx","my","children","LinearProgress","length","backgroundRepeat","backgroundSize","backgroundPosition","backgroundImage","_jsxs","Grid","container","spacing","item","xs","FormControl","fullWidth","InputLabel","Select","labelId","id","value","label","onChange","MenuItem","CytoscapeComponent","style","cy","layout","run","on","Title","props","Typography","component","variant","color","gutterBottom","ElementDetailInfo","_mosaicInfo$id$toHex","_ref4","_mosaic$amount","_mosaicInfo$id$toHex2","amount","divisibility","elementData","symbolManager","txInfo","setTxInfo","setToAddress","_React$useState5","_React$useState6","toAddressStr","setToAddressStr","_React$useState7","_React$useState8","setFromAddress","_React$useState9","_React$useState10","fromAddressStr","setFromAddressStr","_React$useState11","_React$useState12","mosaic","setMosaic","_React$useState13","_React$useState14","mosaicInfo","setMosaicInfo","_React$useState15","_React$useState16","message","setMessage","symbolExplorerBaseUrl","accountsQuery","getMosaicInfo","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","mosaicId","wrap","_context","prev","next","sent","abrupt","stop","_x","apply","arguments","getTransactionInfo","_ref3","_callee2","hash","_tx$signer","_tx$signer2","tx","addressStr","_addressObj$plain","addressObj","_tx$recipientAddress$","_mosaicInfo","_context2","getTransaction","signer","address","recipientAddress","NamespaceId","getAddressByNamespace","getAddress","plain","mosaics","payload","_x2","type","Stack","direction","TextField","InputProps","readOnly","Tooltip","title","IconButton","href","rel","OpenInNewIcon","link","undefined","toHex","compact","Math","pow","toFixed","endAdornment","InputAdornment","position","multiline","maxRows","FormDialog","setGraphMode","setInputProp","setAggregateOpt","setPageNumberOpt","setPageSizeOpt","setPageLimitOpt","open","setOpen","mode","formValue","setFormValue","inputLabel","includeAggregateOpt","pageNumber","setPageNumber","pageSize","setPageSize","pageLimit","setPageLimit","_React$useState17","_React$useState18","_React$useState19","_React$useState20","optionVisibility","pageNumberOpt","pageSizeOpt","pageLimitOpt","handleSelectChange","Number","Button","onClick","Dialog","onClose","DialogTitle","DialogContent","p","FormLabel","autoFocus","required","margin","e","Divider","visibility","m","minWidth","toString","FormHelperText","Alert","severity","DialogActions","disabled","SymbolManager","_classCallCheck","_nodeUrl","_address","_sym","require","_createClass","key","set","this","_init","_makeElementsByRecentTransactions","includeAggregate","townList","townListIndex","nodes","vektor","addressList","image","namespace","isResidents","idx","offset","page","txes","_iterator","_step","txType","_idx","_idx2","fromAddress","_idx3","_hash","_iterator2","_step2","info","inner_hash","_recipientAddress","_fromAddress","_args2","Map","push","String","isParent","getRecentTransactions","_createForOfIteratorHelper","s","n","done","getNamespaceName","has","source","get","getInnerTransactions","t0","f","finish","t1","isLastPage","concat","_getInnerTransactions","_callee3","repositoryFactory","txRepo","result","innerTx","_iterator3","_step3","_context3","RepositoryFactoryHttp","createTransactionRepository","TransactionGroup","Confirmed","toPromise","_getTransaction","_callee4","_context4","_getRecentTransactions","_callee5","accountAddress","_context5","Address","createFromRawAddress","search","group","embedded","_x3","_x4","_x5","_getAddressByNamespace","_callee6","namespaceId","hexToBytes","url","_context6","hex","byteCount","byteArray","Uint8Array","i","byte","parseInt","substr","axios","then","response","rawAddress","alias","base32Encode","padding","catch","error","_x6","_getNamespaceName","_callee7","_names$at$name","_names$at","nameRepo","names","fullName","_context7","createNamespaceRepository","getNamespacesNames","at","_x7","_getAddress","_callee8","_context8","_x8","_getMosaicInfo","_callee9","mosaicHttp","_context9","createMosaicRepository","getMosaic","_x9","_getMosaicInfoByStr","_callee10","mosaicid","_context10","MosaicId","_x10","_convertNamespace","_callee11","list","_loop","_i","_list","_context12","namespaceid","_context11","getNamespace","subscribe","_info$alias$address","active","err","delegateYield","useWindowSize","_useState","_useState2","size","setSize","useLayoutEffect","updateSize","window","innerWidth","innerHeight","addEventListener","removeEventListener","Copyright","_objectSpread","align","Link","Date","getFullYear","AppBar","styled","MuiAppBar","shouldForwardProp","prop","theme","zIndex","drawer","transition","transitions","create","easing","sharp","duration","leavingScreen","marginLeft","enteringScreen","mdTheme","_defineProperty","borderRadius","shape","backgroundColor","alpha","palette","common","white","breakpoints","up","pointerEvents","display","alignItems","justifyContent","InputBase","_ref5","paddingLeft","MuiDrawer","_ref6","whiteSpace","boxSizing","overflowX","createTheme","typography","fontSize","button","textTransform","primary","main","contrastText","background","default","MemoNetworkGraph","MemoFormDialog","MemoElementDetailInfo","readSpreadsheets","_readSpreadsheets","DashboardContent","_useWindowSize","_useWindowSize2","graphMode","inputProp","setIsProgress","graphElements","setGraphElements","setGraphCanvasSize","_React$useState21","_React$useState22","setElementData","_React$useState23","_React$useState24","symbolTownList","setSymbolTownList","_React$useState25","_React$useState26","setTownListIndex","_React$useState27","_React$useState28","_getSymbolTownList","indexList","val","values","str","test","_mosaicTest","getMosaicInfoByStr","getSymbolTownList","mosaicTest","elm","current","elm_data","JSON","parse","stringify","getBoundingClientRect","getElements","_ref8","makeElementsByRecentTransactions","ThemeProvider","CssBaseline","Toolbar","pr","noWrap","flexGrow","Paper","grey","overflow","Container","maxWidth","mt","mb","ref","flexDirection","pt","Dashboard","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.a06758c1.chunk.js","sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport CytoscapeComponent from 'react-cytoscapejs';\r\nimport { ElementDefinition, Stylesheet } from \"cytoscape\";\r\nimport { useTheme } from '@mui/material/styles';\r\nimport InputLabel from '@mui/material/InputLabel';\r\nimport Box from '@mui/material/Box';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport Select, { SelectChangeEvent } from '@mui/material/Select';\r\nimport Paper from '@mui/material/Paper';\r\nimport Grid from '@mui/material/Grid';\r\nimport LinearProgress from '@mui/material/LinearProgress';\r\nimport { functionTypeAnnotation } from \"@babel/types\";\r\nimport Image from '@/assets/XYM City.png';\r\n\r\n\r\n// テストデータ生成\r\nfunction testElement(){\r\n  const nodesLength = 3;\r\n  let elements2:ElementDefinition[] = [];\r\n  for(let i=0; i < nodesLength; i++){\r\n    elements2.push(\r\n      { data: { id: String(i), label: 'Node ' + i }}\r\n    )\r\n  }\r\n\r\n  for(let l=0; l < nodesLength; l++){\r\n    for(let r=0; r < nodesLength; r++){\r\n      elements2.push(\r\n        { data: { source: l, target: r, label: 'Edge from ' + l + ' to ' + r } }\r\n      )\r\n    }\r\n  }\r\n return elements2;\r\n}\r\n\r\nconst stylesheet:Stylesheet[] = [\r\n  {\r\n    \"selector\": \"node\",\r\n    \"style\": {\r\n      \"text-valign\": \"top\",\r\n      \"text-halign\": \"center\",\r\n      \"width\": 20,\r\n      \"height\": 20,\r\n      \"label\": \"data(label)\",\r\n      \"shape\":\"ellipse\",\r\n    }\r\n  }, {\r\n    \"selector\": \"node[isParent]\",\r\n    \"style\": {\r\n      \"shape\":\"star\",\r\n      \"width\": 50,\r\n      \"height\": 50,\r\n      \"background-color\":\"Yellow\",\r\n    }\r\n  },\r\n  {\r\n    \"selector\": \"node[isResidents = 'yes']\",\r\n    \"style\": {\r\n      \"shape\":\"round-hexagon\",\r\n      \"width\": 50,\r\n      \"height\": 50,\r\n      \"background-image\":\"data(image)\"\r\n    }\r\n  }, {\r\n    \"selector\": \"edge\",\r\n    \"style\": {\r\n      \"width\": 2,\r\n      \"curve-style\": \"bezier\",\r\n      \"target-arrow-shape\": \"triangle\"\r\n    }\r\n  }\r\n];\r\n\r\n/* ネットワークグラフ描画コンポーネント */\r\nconst NetworkGraph = ({elements, isProgress, graphCanvasSize, getElement }) => {\r\n  \r\n  console.log('NetworkGraph')\r\n  const theme = useTheme();\r\n\r\n  // グラフ描画タイプ\r\n  const [graphLayoutType, setGraphLayoutType] = React.useState('concentric');\r\n  const layout1 = { name: graphLayoutType,\r\n                    fit: true,\r\n                    animate: true,\r\n                  };\r\n\r\n  // グラフ描画領域のサイズ\r\n  const [canvasSize, setCanvasSize] = React.useState({width:100, height:100});\r\n\r\n  // キャンバスサイズの調整\r\n  React.useEffect(() => {\r\n    setCanvasSize( graphCanvasSize );\r\n  }, [graphCanvasSize]);\r\n\r\n  // グラフ要素クリック時処理\r\n  const tappedElement = function( event ){\r\n    const tgt = event.target;\r\n    const data = tgt.data();\r\n    getElement(data);\r\n  }\r\n\r\n  /*\r\n  const layout1 = { name: 'circle',\r\n                    fit: true \r\n                  };\r\n  const layout2 = { name: 'grid' };\r\n  const layout3 = { name: 'circle' };\r\n  const layout4 = { name: 'concentric' };\r\n  const layout5 = { name: 'breadthfirst' };\r\n  const layout6 = { name: 'cose' };\r\n  */\r\n\r\n  /*\r\n  const cyStylesheet=[\r\n    {\r\n      selector: 'node',\r\n      style: {\r\n        label: 'data(label)',\r\n        width: 20,\r\n        height: 20,\r\n        //shape: 'rectangle',\r\n        //backgroundColor: 'red',\r\n        //borderColor: 'black',\r\n        //borderWidth: 3,\r\n      }\r\n    },\r\n    {\r\n      selector: 'edge',\r\n      style: {\r\n        width: 5,\r\n        //lineColor: 'green',\r\n        //lineStyle: 'dashed'\r\n      }\r\n    }\r\n  ]\r\n  */\r\n\r\n  const paperStyles = {\r\n    paperContainer: {\r\n        backgroundImage: `url(https://drive.google.com/uc?export=view&id=1AXNcvIe5pUIaY1mdftwNgIOCFENO4AQf)`,\r\n    }\r\n  }\r\n\r\n  // グラフ表示タイプ変更ハンドラ\r\n  const handleChange = (event: SelectChangeEvent) => {\r\n    setGraphLayoutType(event.target.value as string);\r\n  };\r\n\r\n  // 読み込み中画面の表示\r\n  if ( isProgress == true ){\r\n    return (\r\n      <Box sx={{ mx: 'auto', my: 'auto', width: '100%' }}>\r\n        <LinearProgress />\r\n      </Box>\r\n    );\r\n  }\r\n\r\n    \r\n  // グラフデータが空の時の画面表示\r\n  if (elements.length < 1 ){\r\n    return (\r\n      <Box sx={{ \r\n        width: '100%',\r\n        height: '100%',\r\n        backgroundRepeat: 'no-repeat',\r\n        backgroundSize: 'cover',\r\n        backgroundPosition: 'center center',\r\n        backgroundImage:'url(https://drive.google.com/uc?export=view&id=1AXNcvIe5pUIaY1mdftwNgIOCFENO4AQf)'}}>\r\n      </Box>\r\n    );\r\n  }\r\n  \r\n  // グラフデータ描画\r\n  return (\r\n    <Grid container spacing={2}>\r\n      <Grid item xs={12}>\r\n\r\n          <FormControl fullWidth>\r\n          <InputLabel>Grapf Layout Type</InputLabel>\r\n          <Select\r\n            labelId=\"demo-simple-select-label\"\r\n            id=\"demo-simple-select\"\r\n            value={graphLayoutType}\r\n            label=\"Graph Layout Type\"\r\n            onChange={handleChange}\r\n          >\r\n            <MenuItem value={'random'}>random</MenuItem>\r\n            <MenuItem value={'circle'}>circle</MenuItem>\r\n            <MenuItem value={'grid'}>grid</MenuItem>\r\n            <MenuItem value={'breadthfirst'}>breadthfirst</MenuItem>\r\n            <MenuItem value={'concentric'}>concentric</MenuItem>\r\n            <MenuItem value={'cose'}>cose</MenuItem>\r\n\r\n          </Select>\r\n        </FormControl>\r\n\r\n      </Grid>\r\n\r\n      <Grid item xs={12}>\r\n\r\n      <CytoscapeComponent\r\n      elements={elements}\r\n      stylesheet={stylesheet}\r\n      style={{width: canvasSize.width,\r\n              height: canvasSize.height,\r\n            } }\r\n      cy={(cy) => {\r\n        // グラフ表示タイプの適用\r\n        cy.elements().layout(layout1).run();\r\n        // ノードとエッジがクリックされた時\r\n        cy.on('tap', 'edge', tappedElement);\r\n        cy.on(\"tap\", 'node', tappedElement);\r\n      }} \r\n      />\r\n\r\n      </Grid>\r\n    </Grid>\r\n\r\n\r\n  );\r\n}\r\n\r\nexport default NetworkGraph","import * as React from 'react';\r\nimport Typography from '@mui/material/Typography';\r\n\r\ninterface TitleProps {\r\n  children?: React.ReactNode;\r\n}\r\n\r\nexport default function Title(props: TitleProps) {\r\n  return (\r\n    <Typography component=\"h2\" variant=\"h6\" color=\"primary\" gutterBottom>\r\n      {props.children}\r\n    </Typography>\r\n  );\r\n}","import * as React from 'react';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport Typography from '@mui/material/Typography';\r\nimport TextField from '@mui/material/TextField';\r\nimport Link from '@mui/material/Link';\r\nimport Box from '@mui/material/Box';\r\nimport OpenInNewIcon from '@mui/icons-material/OpenInNew';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Tooltip from '@mui/material/Tooltip';\r\nimport Stack from '@mui/material/Stack';\r\nimport InputAdornment from '@mui/material/InputAdornment';\r\n\r\nimport { LineChart, Line, XAxis, YAxis, Label, ResponsiveContainer } from 'recharts';\r\nimport Title from './Title';\r\nimport {SymbolManager} from '../symbol/SymbolManager'\r\nimport { TransactionInfo, Transaction, MosaicId, Address, NamespaceId, Mosaic, MosaicInfo } from 'symbol-sdk';\r\nimport { number } from 'yargs';\r\n\r\n// モザイク量の計算と表現正規化\r\nfunction regularizationAmount( amount:number|undefined, divisibility:number|undefined ){\r\n  if( amount == undefined ){\r\n    return  0; \r\n  }\r\n  // 可分性から係数を算出\r\n  if( divisibility == undefined){\r\n    return amount\r\n  }\r\n  const coefficient = ((divisibility ?? 0) == 0) ? 1 : ( 1/(10**divisibility))\r\n  return (amount * coefficient ).toFixed( 6 );\r\n}\r\n\r\n/**\r\n * \r\n * @param elementData: 選択されたグラフエレメント情報\r\n * @param symbolManager: Symbol管理クラス\r\n * @returns \r\n */\r\nconst ElementDetailInfo = ( {elementData, symbolManager } )=> {\r\n\r\n  const theme = useTheme();\r\n\r\n  /*\r\n   * State定義\r\n   */\r\n  const [ txInfo, setTxInfo] = React.useState<Transaction>();\r\n  const [ toAddress, setToAddress] = React.useState<Address>();\r\n  const [ toAddressStr, setToAddressStr] = React.useState<string>('');\r\n  const [ fromAddress, setFromAddress] = React.useState<Address>();\r\n  const [ fromAddressStr, setFromAddressStr] = React.useState<string>('');\r\n  const [ mosaic, setMosaic ] = React.useState<Mosaic>();\r\n  const [ mosaicInfo, setMosaicInfo ] = React.useState<MosaicInfo>();\r\n  const [ message, setMessage ] = React.useState<string>('');\r\n\r\n  // Symbolエクスプローラーへのリンク生成用\r\n  const symbolExplorerBaseUrl = 'https://symbol-explorer.com/'\r\n  const transactionsQuery = 'transactions/'\r\n  const accountsQuery = 'accounts/'\r\n  const mosaicQuery = 'mosaics/'\r\n\r\n  // エッジ選択時処理：ハッシュからトランザクション詳細情報を取得\r\n  React.useEffect(() => {\r\n\r\n    // useEffect自体ではasyncの関数を受け取れないので内部で関数を定義して呼び出す。\r\n\r\n    // モザイク情報の取得\r\n    const getMosaicInfo = async ( mosaicId:MosaicId ) =>{\r\n        const mosaicInfo = await symbolManager.getMosaicInfo( mosaicId );\r\n        console.log( mosaicInfo );\r\n        return mosaicInfo;\r\n    }\r\n\r\n    // トランザクション詳細の取得\r\n    const getTransactionInfo = async ( hash:string ) =>{\r\n        \r\n      // トランザクション詳細取得\r\n      const tx = await symbolManager.getTransaction(hash);\r\n      console.log(tx);\r\n      setTxInfo(tx);\r\n\r\n      // 送信元アドレス情報の保持\r\n      setFromAddress( tx?.signer?.address )\r\n      setFromAddressStr(tx?.signer?.address.address )\r\n      \r\n      // 送信先アドレスのネームスペース判定\r\n      if( tx?.recipientAddress instanceof NamespaceId ){\r\n          // ネームスペースからアドレス形式に変換\r\n          const addressStr = await symbolManager.getAddressByNamespace( tx?.recipientAddress );\r\n          if( addressStr != ''){\r\n            const addressObj = await symbolManager.getAddress( addressStr )\r\n            setToAddress( addressObj )\r\n            setToAddressStr (  addressObj?.plain() ?? '')\r\n          }\r\n      }else{\r\n        setToAddress(tx?.recipientAddress )\r\n        setToAddressStr ( tx?.recipientAddress.plain() ?? '')\r\n      }\r\n\r\n      // モザイク情報の取得\r\n      if( tx.mosaics.length > 0){\r\n        const mosaicInfo = await getMosaicInfo( tx.mosaics[0].id )\r\n        setMosaic( tx.mosaics[0] );\r\n        setMosaicInfo(mosaicInfo )\r\n      }\r\n\r\n      // メッセージ情報の取得\r\n      setMessage( tx.message.payload );\r\n\r\n    } \r\n\r\n    // 選択エレメントがエッジの場合\r\n    if( elementData.type == 'edge' ){\r\n\r\n      // トランザクションハッシュから詳細情報を取得\r\n      getTransactionInfo( elementData.label );\r\n    \r\n    }else if( elementData.type == 'node'){\r\n    // 選択エレメントがノードの場合\r\n\r\n    console.log(elementData)\r\n\r\n    }\r\n  }, [ elementData ]);\r\n\r\n  // ノードの場合\r\n  if( elementData.type == 'node' ){\r\n\r\n    return(\r\n      <React.Fragment>\r\n        <Title>選択要素の詳細</Title>\r\n\r\n        <Stack spacing={2}>\r\n          {/* アドレス */}\r\n          <Stack direction=\"row\">\r\n            <TextField\r\n                id=\"outlined-read-only-input\"\r\n                label=\"アドレス\"\r\n                variant=\"standard\"\r\n                value={elementData.label}\r\n                InputProps={{\r\n                  readOnly: true,\r\n                }}\r\n              />          \r\n            <Tooltip title=\"ViewExplorer\">\r\n              <IconButton color=\"primary\" \r\n              href={ symbolExplorerBaseUrl + accountsQuery + elementData.label } \r\n              target=\"_blank\" rel=\"noopener noreferrer\">\r\n              <OpenInNewIcon />\r\n              </IconButton>\r\n            </Tooltip>\r\n          </Stack>\r\n\r\n          {/* ネームスペース */}\r\n          { /* TODO: ネームスペース情報も表示する */}\r\n          \r\n          {/* 名前 */}\r\n          <TextField\r\n              id=\"outlined-read-only-input\"\r\n              label=\"Name\"\r\n              variant=\"standard\"\r\n              value={elementData.name}\r\n              InputProps={{\r\n                readOnly: true,\r\n              }}\r\n            />\r\n\r\n          {/* SNS情報 */}\r\n          <Stack direction=\"row\">\r\n            <TextField\r\n                id=\"outlined-read-only-input\"\r\n                label=\"Twitter/SNS\"\r\n                variant=\"standard\"\r\n                value={elementData.link}\r\n                InputProps={{\r\n                  readOnly: true,\r\n                }}\r\n              />\r\n            <Tooltip title=\"ViewExplorer\">\r\n              <IconButton color=\"primary\" \r\n              href={ elementData.link } \r\n              target=\"_blank\" rel=\"noopener noreferrer\">\r\n              <OpenInNewIcon />\r\n              </IconButton>\r\n            </Tooltip>\r\n          </Stack>\r\n\r\n        </Stack>\r\n        \r\n      </React.Fragment>\r\n    );\r\n  }\r\n\r\n  // エッジの場合\r\n  else if( elementData.type == 'edge'){\r\n\r\n    if( txInfo == undefined ) {\r\n      return(\r\n        <React.Fragment>\r\n          何も選択されてません       \r\n        </React.Fragment>\r\n      );\r\n    }\r\n\r\n    return(\r\n    <React.Fragment>\r\n\r\n      <Title>選択要素の詳細</Title>\r\n\r\n      <Stack spacing={2}>\r\n\r\n      <Stack direction=\"row\">\r\n      <TextField\r\n          id=\"outlined-read-only-input\"\r\n          label=\"トランザクションハッシュ\"\r\n          variant=\"standard\"\r\n          value={elementData.label}\r\n          InputProps={{\r\n            readOnly: true,\r\n          }}\r\n        />          \r\n        <Tooltip title=\"ViewExplorer\">\r\n          <IconButton color=\"primary\" \r\n          href={ symbolExplorerBaseUrl + transactionsQuery + elementData.label }\r\n          target=\"_blank\" rel=\"noopener noreferrer\">\r\n          <OpenInNewIcon />\r\n          </IconButton>\r\n        </Tooltip>\r\n      </Stack>\r\n\r\n      <Stack direction=\"row\">\r\n      <TextField\r\n          id=\"outlined-read-only-input\"\r\n          label=\"送信先アドレス\"\r\n          variant=\"standard\"\r\n          value={ toAddressStr }\r\n          InputProps={{\r\n            readOnly: true,\r\n          }}\r\n        />          \r\n        <Tooltip title=\"ViewExplorer\">\r\n          <IconButton color=\"primary\" \r\n          href={ symbolExplorerBaseUrl + accountsQuery + toAddressStr  } \r\n          target=\"_blank\" rel=\"noopener noreferrer\">\r\n          <OpenInNewIcon />\r\n          </IconButton>\r\n        </Tooltip>\r\n      </Stack>\r\n\r\n      <Stack direction=\"row\">\r\n      <TextField\r\n          id=\"outlined-read-only-input\"\r\n          label=\"送信元アドレス\"\r\n          variant=\"standard\"\r\n          value={ fromAddressStr}\r\n          InputProps={{\r\n            readOnly: true,\r\n          }}\r\n        />          \r\n\r\n        <Tooltip title=\"ViewExplorer\">\r\n          <IconButton color=\"primary\" \r\n          href={ symbolExplorerBaseUrl + accountsQuery + fromAddressStr  }\r\n          target=\"_blank\" rel=\"noopener noreferrer\"\r\n          sx={{ my: 'auto'}}>\r\n          <OpenInNewIcon />\r\n          </IconButton>\r\n        </Tooltip>\r\n      </Stack>\r\n\r\n      <Stack direction=\"row\">\r\n      <TextField\r\n          id=\"outlined-read-only-input\"\r\n          label=\"MosaicID\"\r\n          variant=\"standard\"\r\n          value={mosaicInfo?.id.toHex() ?? 'none'}\r\n          InputProps={{\r\n            readOnly: true,\r\n          }}\r\n        />          \r\n\r\n        <Tooltip title=\"ViewExplorer\">\r\n          <IconButton color=\"primary\" \r\n          href={ symbolExplorerBaseUrl + mosaicQuery + mosaicInfo?.id.toHex() ?? 'error' }\r\n          target=\"_blank\" rel=\"noopener noreferrer\"\r\n          sx={{ my: 'auto'}}>\r\n          <OpenInNewIcon />\r\n          </IconButton>\r\n        </Tooltip>\r\n      </Stack>\r\n\r\n      <TextField\r\n          id=\"outlined-read-only-input\"\r\n          label=\"Amount\"\r\n          variant=\"standard\"\r\n          value={ regularizationAmount(mosaic?.amount?.compact(), mosaicInfo?.divisibility)}\r\n          InputProps={{\r\n            readOnly: true,\r\n            endAdornment: (\r\n              <InputAdornment position=\"end\">\r\n                { ((mosaicInfo?.id.toHex() ?? '') == '6BED913FA20223F8') && 'XYM'}\r\n              </InputAdornment>\r\n            ),\r\n          }}\r\n        />   \r\n\r\n        <TextField\r\n          id=\"outlined-read-only-input\"\r\n          label=\"Message\"\r\n          multiline\r\n          maxRows={3}\r\n          variant=\"standard\"\r\n          value={ message }\r\n          InputProps={{\r\n            readOnly: true\r\n          }}\r\n        />   \r\n\r\n      </Stack>\r\n\r\n      </React.Fragment>\r\n    );\r\n\r\n  }else{\r\n\r\n    return (\r\n\r\n        <React.Fragment>     \r\n        </React.Fragment>\r\n\r\n      );\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n *       { (address!='') && <div>アドレス：{address}</div>}\r\n      { (namespace!='') && <div>ネームスペース：{namespace}</div>}\r\n\r\n      { (hash!='') && <div>ハッシュ：{hash}</div>}\r\n      \r\n */\r\n\r\nexport default ElementDetailInfo","import * as React from 'react';\r\nimport Box from '@mui/material/Box';\r\nimport Button from '@mui/material/Button';\r\nimport TextField from '@mui/material/TextField';\r\nimport Grid from '@mui/material/Grid';\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogContentText from '@mui/material/DialogContentText';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\nimport Divider from '@mui/material/Divider';\r\nimport Stack from '@mui/material/Stack';\r\nimport Select, { SelectChangeEvent } from '@mui/material/Select';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport Radio from '@mui/material/Radio';\r\nimport RadioGroup from '@mui/material/RadioGroup';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport FormHelperText from '@mui/material/FormHelperText';\r\nimport FormLabel from '@mui/material/FormLabel';\r\nimport InputLabel from '@mui/material/InputLabel';\r\nimport Switch from '@mui/material/Switch';\r\nimport Typography from '@mui/material/Typography';\r\nimport { Label } from 'recharts';\r\nimport Container from '@mui/material/Container';\r\nimport Alert from '@mui/material/Alert';\r\n\r\nconst FormDialog =({setGraphMode, setInputProp, setAggregateOpt, setPageNumberOpt, setPageSizeOpt, setPageLimitOpt}) => {\r\n  \r\n    console.log('*** FormDialog() ***');\r\n\r\n    /**\r\n     * State定義 \r\n     */\r\n    // ダイアログ開閉ステータス\r\n    const [open, setOpen] = React.useState(false);\r\n    // 検索モード指定（アカウント検索 or モザイク検索）\r\n    const [mode, setMode] = React.useState('Account');\r\n    // 入力フォーム（ウォレットアドレス or モザイクID）  \r\n    const [formValue, setFormValue] = React.useState(\"\");\r\n    const [inputLabel, setInputLabel] = React.useState('Symbol Wallet Address');\r\n    // 検索オプション(アグリゲートトランザクション含むか、検索ページ数等)\r\n    const [includeAggregateOpt, setIncludeAggregateOpt] = React.useState(false);\r\n    const [pageNumber, setPageNumber] = React.useState(1);\r\n    const [pageSize, setPageSize] = React.useState(100);\r\n    const [pageLimit, setPageLimit] = React.useState(1);\r\n    // ダイアログ横幅可変用\r\n    const [fullWidth, setFullWidth] = React.useState(true);\r\n    // モードに応じてオプションの表示切り替え\r\n    const [optionVisibility, setOptionVisibility] = React.useState('visible');\r\n\r\n    // オプション設定スイッチの名称\r\n    const switchName1 = 'AggregateOption';\r\n    const switchName2 = 'MosaicOption';\r\n\r\n    // Pagingオプション名称\r\n    const pageNumberOpt = 'pageNumber'\r\n    const pageSizeOpt = 'pageSize'\r\n    const pageLimitOpt = 'pageLimit'\r\n\r\n    // ダイアログ表示ボタンハンドラ\r\n    const handleClickOpen = () => {\r\n      setOpen(true);\r\n    };\r\n  \r\n    // OKボタンハンドラ\r\n    const handleOk = () => {\r\n      console.log(\"input OK\")\r\n      setGraphMode(mode)\r\n      setInputProp(formValue)\r\n      setAggregateOpt(includeAggregateOpt);\r\n      setPageNumberOpt(pageNumber);\r\n      setPageSizeOpt(pageSize);\r\n      setPageLimitOpt(pageLimit);\r\n      setOpen(false);\r\n    };\r\n\r\n    // キャンセルボタンハンドラ\r\n    const handleCancel = () => {\r\n        setOpen(false);\r\n      };\r\n\r\n    // 枠外クリック時ハンドラ\r\n    const handleClose = () => {\r\n      // 何もしない\r\n    };\r\n\r\n    // 横幅変更時ハンドラ\r\n    const handleFullWidthChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n      setFullWidth(event.target.checked);\r\n    };\r\n\r\n    // ラジオボタン変更ハンドラ\r\n    const handleRadioChange = (event) => {\r\n      setMode(event.target.value)\r\n\r\n      if( event.target.value == 'Account'){\r\n        setOptionVisibility(`visible`);\r\n        setInputLabel('Symbol Wallet Address')\r\n      }else{\r\n        setOptionVisibility(`hidden`);\r\n        setInputLabel('モザイクID')\r\n      }\r\n    };\r\n\r\n    // スイッチ切り替わりハンドラ\r\n    const switchHandler = (event) => {\r\n        setIncludeAggregateOpt(event.target.checked);        \r\n    };  \r\n\r\n    // セレクタ変更ハンドラ\r\n    const handleSelectChange = (event: SelectChangeEvent) => {\r\n      switch(event.target.name){\r\n        case pageNumberOpt:\r\n          setPageNumber(Number(event.target.value));\r\n          break;\r\n        case pageSizeOpt:\r\n          setPageSize(Number(event.target.value));\r\n          break;\r\n        case pageLimitOpt:\r\n          setPageLimit(Number(event.target.value));\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    };\r\n\r\n    // サンプルアドレスセットボタンハンドラ\r\n    const handleSetSampleAddress = ( event ) => {\r\n      setFormValue(\"NCAY26LEBPOXM7NPCNV4HL4EH5WM6UJ5UUN4UGA\");\r\n    }\r\n  \r\n\r\n    // 初回のみ実行：ダイアログを表示\r\n    React.useEffect(() => {\r\n      setOpen(true);\r\n    }, []);\r\n        \r\n\r\n    return (\r\n      <div>\r\n        <Button variant=\"outlined\" onClick={handleClickOpen}>\r\n          ChangeSetting\r\n        </Button>\r\n\r\n        <Dialog open={open} onClose={handleClose}>\r\n          <DialogTitle>Symbol Network Graph</DialogTitle>          \r\n          <DialogContent>\r\n\r\n            {/*モード選択ラジオボタン*/}\r\n            {/*\r\n            // TODO: モザイク検索モードを追加\r\n            <Box sx={{p: 1 }}>\r\n              <FormControl component=\"fieldset\">\r\n                <FormLabel component=\"legend\">モード選択</FormLabel>\r\n                <RadioGroup row value={mode} onChange={handleRadioChange}>\r\n                  <FormControlLabel value=\"Account\" control={<Radio />} label=\"アカウント\" />\r\n                  <FormControlLabel value=\"Mosaic\" control={<Radio />} label=\"モザイク\" />\r\n                </RadioGroup>\r\n              </FormControl>\r\n\r\n              <Typography variant=\"body2\" gutterBottom>\r\n                アカウント：対象のアカウントと繋がりのあるアカウントを表示します。<br/>\r\n                モザイク：対象のモザイクの保有者の繋がりを表示します。 ※準備中<br/>\r\n              </Typography>\r\n              \r\n            </Box>\r\n            /*}\r\n\r\n            {/* ウォレットアドレス or モザイクIDの入力 */}\r\n            <Box sx={{ p: 1}}>\r\n            <FormLabel component=\"legend\">{inputLabel}</FormLabel>\r\n            <TextField\r\n              autoFocus\r\n              required\r\n              id=\"outlined-required\"\r\n              label=\"Required\"\r\n              margin=\"dense\"\r\n              fullWidth\r\n              value={formValue}\r\n              onChange={e => {\r\n                setFormValue(e.target.value)\r\n              }}\r\n            />\r\n            <Button variant=\"text\" onClick={handleSetSampleAddress}>Set Sample Address</Button>\r\n            </Box>\r\n\r\n           \r\n\r\n            <Divider variant=\"middle\" />\r\n\r\n            {/* トランザクション検索オプション*/}\r\n            <Box sx={{ p:1, visibility: optionVisibility }}>\r\n              <FormControl component=\"fieldset\">\r\n                <FormLabel>Optional</FormLabel>\r\n\r\n                  {/*\r\n                  <FormGroup aria-label=\"position\" row sx={{m:1}}>\r\n                    <FormControlLabel\r\n                      value='Aggregate Option'\r\n                      control={<Switch color=\"primary\" name={switchName1} checked={includeAggregateOpt} onChange={switchHandler} disabled={true}/>}\r\n                      label=\"アグリゲートトランザクションを含める(※準備中)\"\r\n                      labelPlacement=\"end\"\r\n                    />\r\n                  </FormGroup>\r\n                  */}\r\n              </FormControl>\r\n            </Box>\r\n\r\n            {/* ページ検索オプション*/}\r\n            <Box sx={{p:1, visibility: optionVisibility}}>\r\n            <Grid container spacing={3}>\r\n              <Grid item xs={4}>\r\n                <FormControl variant=\"standard\" sx={{ m: 1, minWidth: 120 }}>\r\n                  <InputLabel id=\"demo-simple-select-label\">PageNum</InputLabel>\r\n                  <Select\r\n                    labelId=\"demo-simple-select-label\"\r\n                    id=\"demo-simple-select\"\r\n                    value={pageNumber.toString()}\r\n                    label=\"PageNumber\"\r\n                    onChange={handleSelectChange}\r\n                    name={pageNumberOpt}\r\n                  >\r\n                    <MenuItem value={1}>1</MenuItem>\r\n                    <MenuItem value={2}>2</MenuItem>\r\n                    <MenuItem value={3}>3</MenuItem>\r\n                    <MenuItem value={4}>4</MenuItem>\r\n                    <MenuItem value={5}>5</MenuItem>\r\n                    <MenuItem value={6}>6</MenuItem>\r\n                    <MenuItem value={7}>7</MenuItem>\r\n                    <MenuItem value={8}>8</MenuItem>\r\n                    <MenuItem value={9}>9</MenuItem>\r\n                    <MenuItem value={10}>10</MenuItem>           \r\n                  </Select>\r\n                  <FormHelperText>read page position<br/>(Oldest first)</FormHelperText>\r\n                </FormControl>\r\n              </Grid>\r\n              <Grid item xs={4}>\r\n\r\n                <FormControl  variant=\"standard\" sx={{ m: 1, minWidth: 120 }}>\r\n                <InputLabel id=\"demo-simple-select-label\">PageSize</InputLabel>\r\n                <Select\r\n                  labelId=\"demo-simple-select-label\"\r\n                  id=\"demo-simple-select\"\r\n                  value={pageSize.toString()}\r\n                  label=\"PageSize\"\r\n                  onChange={handleSelectChange}\r\n                  name={pageSizeOpt}\r\n                >\r\n                    <MenuItem value={10}>10</MenuItem>\r\n                    <MenuItem value={20}>20</MenuItem>\r\n                    <MenuItem value={50}>50</MenuItem>\r\n                    <MenuItem value={100}>100</MenuItem>\r\n                  </Select>\r\n                  <FormHelperText>Number of transactions to include on page</FormHelperText>\r\n                </FormControl>\r\n\r\n              </Grid>\r\n              <Grid item xs={4}>\r\n\r\n              <FormControl  variant=\"standard\" sx={{ m: 1, minWidth: 120 }}>\r\n              <InputLabel id=\"demo-simple-select-label\">PageLimit</InputLabel>\r\n              <Select\r\n                labelId=\"demo-simple-select-label\"\r\n                id=\"demo-simple-select\"\r\n                value={pageLimit.toString()}\r\n                label=\"PageLimit\"\r\n                onChange={handleSelectChange}\r\n                name={pageLimitOpt}\r\n              >\r\n                <MenuItem value={1}>1</MenuItem>\r\n                <MenuItem value={5}>5</MenuItem>\r\n                <MenuItem value={10}>10</MenuItem>\r\n                <MenuItem value={50}>50</MenuItem>\r\n                <MenuItem value={100}>100</MenuItem>\r\n              </Select>\r\n              <FormHelperText>read page position</FormHelperText>\r\n            </FormControl>\r\n\r\n              </Grid>\r\n            </Grid>            \r\n            <Alert severity=\"warning\">最大ページ数を大きくしすぎると、検索に時間がかかる場合があります。<br/>\r\n            (If the maximum number of pages is set too large, the search will take longer)</Alert>\r\n            </Box>        \r\n          </DialogContent>\r\n\r\n          {/* キャンセルボタン・OKボタン*/}\r\n          <DialogActions>\r\n            <Button onClick={handleCancel}>Cancel</Button>\r\n            <Button onClick={handleOk} disabled={formValue.length==0}>OK</Button>\r\n          </DialogActions>\r\n        </Dialog>\r\n      </div>\r\n    );\r\n  }\r\n\r\nexport default FormDialog;","import React, { useState } from 'react'\r\nimport { ElementDefinition } from \"cytoscape\";\r\nimport {\r\n    Account,\r\n    AccountInfo,\r\n    AccountRepository,\r\n    NetworkType,\r\n    Address, \r\n    MosaicInfo,\r\n    MosaicId,\r\n    RepositoryFactoryHttp,\r\n    TransactionHttp,\r\n    TransactionInfo,\r\n    Transaction,\r\n    NamespaceId\r\n  } from 'symbol-sdk'\r\nimport { retry } from 'rxjs';\r\nimport { createNoSubstitutionTemplateLiteral } from 'typescript';\r\nimport axios from 'axios'\r\nimport base32Encode from 'base32-encode'\r\nimport { Residents } from '../components/Dashboard';\r\nimport { indigo } from '@mui/material/colors';\r\n\r\n/* SymbolBlockchain管理クラス */\r\nexport class SymbolManager{\r\n\r\n    // 形宣言\r\n    private _nodeUrl: string = 'https://ik1-432-48199.vs.sakura.ne.jp:3001';\r\n    private _address: string = '';\r\n    private _sym = require(\"../../node_modules/symbol-sdk\");\r\n\r\n    // constructor\r\n    constructor(){\r\n    }\r\n\r\n    // アドレスセッター\r\n    set address(address: string) {\r\n        this._address = address;\r\n    }\r\n    \r\n    // 初期化\r\n    public async init(){\r\n        // Todo:Symbolアドレスのバリデーション\r\n\r\n        // Symbolアカウント情報の取得\r\n        //await this.setAccountInfo();\r\n\r\n    }\r\n\r\n    // トランザクション一覧からグラフ描画用データを出力\r\n    public async makeElementsByRecentTransactions(\r\n        pageNumber:number = 1,\r\n        pageSize:number = 10,\r\n        pageLimit:number=5,\r\n        includeAggregate:boolean=false,\r\n        townList:Residents[],\r\n        townListIndex:{},\r\n        ){\r\n\r\n        // TODO:この関数が太りすぎているいるので、外だしする\r\n        //（SymbolManagerクラスなので、Symbol関連処理だけに完結させたい）\r\n\r\n        // TODO:ネームスペースでのリストのマッチングが上手くいかない場合がある\r\n\r\n        // グラフ描画データ\r\n        let elements: ElementDefinition[] = [];\r\n        let nodes: ElementDefinition[] = [];\r\n        let vektor: ElementDefinition[] = [];\r\n\r\n        // アドレス管理リスト(グラフのノード重複登録防止)\r\n        let addressList:Map<string, number> = new Map();\r\n\r\n        // Symbolタウン住民プロフィール\r\n        let name = '';\r\n        let image = '';\r\n        let link = '';\r\n        let namespace = '';    \r\n        let isResidents = '';\r\n\r\n        // 基点となるアドレスを各データセットに追加\r\n        addressList.set(this._address,0);  \r\n        // Symbolタウン住民かのチェック\r\n        if( this._address in townListIndex ){\r\n            const idx = townListIndex[this._address];\r\n            name = townList[ idx ][0];\r\n            image = townList[ idx ][2];\r\n            link = townList[ idx ][1];\r\n            isResidents = 'yes';\r\n        }\r\n        nodes.push(\r\n            { data: { id: String(0), label: this._address, isParent:true, isResidents:isResidents, name:name, image:image, link:link, type:'node' }}\r\n        );\r\n        // ノードID初期化\r\n        let id=1;\r\n\r\n        // 過去のトランザクション一覧を取得\r\n        // 取得上限に達するか、最後のPageにたどり着くまで繰り返し取得\r\n        let offset:number = 0;  // トランザクション検索オフセット(TransactionID)\r\n        do{\r\n\r\n            // トランザクション履歴取得\r\n            const page = await this.getRecentTransactions(pageNumber++, pageSize, offset);\r\n            if( page == undefined ){\r\n                break;\r\n            }\r\n\r\n            // トランザクションタイプごとに分けて分析 \r\n            const txes = page.data;\r\n            for( const tx of txes){\r\n                // ----------------------\r\n                // TransferTransaction\r\n                // ----------------------\r\n                const txType = tx['type'];\r\n                if ( txType == 16724){\r\n\r\n                    if( tx['transactionInfo'] == undefined || tx['signer'] == undefined ){\r\n                        continue\r\n                    }\r\n\r\n                    // トランザクションハッシュ\r\n                    const hash = tx['transactionInfo']['hash']\r\n\r\n                    // 送信先アドレス\r\n                    let recipientAddress = tx['recipientAddress']['address'] \r\n\r\n                    // 送信先アドレスがネームスペースだった場合\r\n                    if( recipientAddress == undefined || tx['recipientAddress'] instanceof NamespaceId ){\r\n                        // ネームスペースからアドレス形式に変換\r\n                        recipientAddress = await this.getAddressByNamespace( tx['recipientAddress']  );\r\n                        // ネームスペース名も取得\r\n                        namespace = await this.getNamespaceName( tx['recipientAddress'] )\r\n                    }\r\n\r\n\r\n                    // Symbolタウン住民か判定(アドレスまたはネームスペース)\r\n                    if(recipientAddress in townListIndex){\r\n                        const idx = townListIndex[recipientAddress];\r\n                        name = townList[ idx ][0];\r\n                        image = townList[ idx ][2];\r\n                        link = townList[ idx ][1];\r\n                        isResidents = 'yes';\r\n                    }else if(namespace in townListIndex ){\r\n                        const idx = townListIndex[namespace];\r\n                        name = townList[ idx ][0];\r\n                        image = townList[ idx ][2];\r\n                        link = townList[ idx ][1];\r\n                        isResidents = 'yes';\r\n                    }\r\n\r\n                    if (addressList.has(recipientAddress) == false){\r\n                        addressList.set(recipientAddress,id);\r\n                        nodes.push(\r\n                            { data: { id: String(id++), label: recipientAddress, namespace:namespace, isResidents:isResidents, name:name, image:image,link:link, type:'node'}}\r\n                        );\r\n                    }\r\n\r\n                    name = '';\r\n                    image = '';\r\n                    link = '';\r\n                    namespace='';\r\n                    isResidents = '';\r\n\r\n                    // 送信元アドレス\r\n                    const fromAddress = tx['signer']['address'][`address`]  \r\n\r\n                    if (addressList.has(fromAddress) == false){\r\n\r\n\r\n                        // Symbolタウン住民か判定\r\n                        if(fromAddress in townListIndex ){\r\n                            const idx = townListIndex[fromAddress];\r\n                            name = townList[ idx ][0];\r\n                            image = townList[ idx ][2];\r\n                            link = townList[ idx ][1];\r\n                            isResidents = 'yes';\r\n                        }\r\n\r\n\r\n                        addressList.set(fromAddress,id)\r\n                        nodes.push(\r\n                            { data: { id: String(id++), label: fromAddress, isResidents:isResidents, name:name, image:image,link:link, type:'node' }}\r\n                        );                        \r\n                    }    \r\n\r\n                    name = '';\r\n                    namespace = '';\r\n                    image = '';\r\n                    link = '';\r\n                    isResidents = '';\r\n\r\n                    // ベクトル追加\r\n                    vektor.push(\r\n                        { data: { source: addressList.get(fromAddress), target: addressList.get(recipientAddress), label: hash, isParent:true, type:'edge' } }\r\n                    );   \r\n                    continue;\r\n                }\r\n                \r\n                // ----------------------\r\n                // アグリゲートトランザクション\r\n                // -> トランザクションハッシュから詳細情報を取ってくる\r\n                // ----------------------\r\n                if( txType == 16705 ){\r\n\r\n                    if(includeAggregate == false){\r\n                        continue;\r\n                    }\r\n\r\n                    if( tx['transactionInfo'] == undefined){\r\n                        continue;\r\n                    }\r\n                    // トランザクションハッシュ\r\n                    const hash = tx['transactionInfo']['hash']      \r\n                    if( hash == undefined){\r\n                        continue;\r\n                    }            \r\n\r\n                    // トランザクション詳細の取得\r\n                    const txInfo = await this.getInnerTransactions(hash);\r\n                    for( const info of txInfo ){\r\n\r\n                        const inner_hash = tx['transactionInfo']['hash']\r\n\r\n                        // 送信先アドレス\r\n                        const recipientAddress = info['recipientAddress']['address'];\r\n                        if (addressList.has(recipientAddress) == false){\r\n                            addressList.set(recipientAddress,id)\r\n                            nodes.push(\r\n                                { data: { id: String(id++), label: recipientAddress, name:'name', type:'node' }}\r\n                            );\r\n                        }\r\n                        // 送信元アドレス\r\n                        if (tx['signer'] == undefined){\r\n                            continue;\r\n                        }\r\n                        const fromAddress = tx['signer']['address'][`address`] \r\n                        if (addressList.has(fromAddress) == false){\r\n                            addressList.set(fromAddress,id)\r\n                            nodes.push(\r\n                                { data: { id: String(id++), label: fromAddress, name:'name', type:'node' }}\r\n                            );\r\n                        }\r\n                        // ベクトル追加\r\n                        vektor.push(\r\n                            { data: { source: addressList.get(fromAddress), target: addressList.get(recipientAddress), label: inner_hash, type:'edge' } }\r\n                        );\r\n                    }\r\n                }\r\n            }\r\n\r\n            // 最後のページ or 上限到達で終了\r\n            if ( page.isLastPage == true || pageNumber > pageLimit){\r\n                break;\r\n            }\r\n\r\n        }while(1)\r\n\r\n        console.log('FINISH');\r\n        console.log('id = ' + id);\r\n        console.log('total page size = ' + (pageNumber - 1) )\r\n        \r\n        elements = nodes.concat( vektor );\r\n        return elements;\r\n    }\r\n\r\n    // ハッシュからトランザクション詳細を取得\r\n    private async getInnerTransactions(hash:string){\r\n        \r\n        let txInfo:TransactionInfo[] = [];\r\n        const repositoryFactory = new RepositoryFactoryHttp(this._nodeUrl);\r\n        const txRepo = repositoryFactory.createTransactionRepository();\r\n        const result = await txRepo.getTransaction(hash, this._sym.TransactionGroup.Confirmed).toPromise();\r\n\r\n        if ( result == undefined ){\r\n            return txInfo;\r\n        } \r\n\r\n        // InnerTransactionsからTransferTransactionを抽出\r\n        const innerTx:TransactionInfo[] = result['innerTransactions']\r\n        for ( const tx of innerTx ){\r\n            // TransferTransaction以外はスキップ\r\n            if( tx['type'] != 16724){\r\n                continue;\r\n            }\r\n            // トランザクション情報を取り出す\r\n            txInfo.push( tx )\r\n        }\r\n        return txInfo;\r\n    }\r\n\r\n    // ハッシュからトランザクション詳細を取得\r\n    public async getTransaction(hash:string){\r\n    \r\n        let txInfo:TransactionInfo[] = [];\r\n        const repositoryFactory = new RepositoryFactoryHttp(this._nodeUrl);\r\n        const txRepo = repositoryFactory.createTransactionRepository();\r\n        const result = await txRepo.getTransaction(hash, this._sym.TransactionGroup.Confirmed).toPromise();\r\n        return result;\r\n    }\r\n\r\n    // 直近のトランザクション履歴取得\r\n    private async getRecentTransactions(pageNumber, pageSize, offset?: number){\r\n        \r\n        let isLastPage:boolean = false;\r\n        let txes:Transaction[] = [];\r\n        \r\n        console.log('RecentTransactions');\r\n        const repositoryFactory = new RepositoryFactoryHttp(this._nodeUrl);\r\n        const txRepo = repositoryFactory.createTransactionRepository();\r\n        const accountAddress = Address.createFromRawAddress(this._address);\r\n        const result = await txRepo.search(\r\n            {\r\n                group:this._sym.TransactionGroup.Confirmed,\r\n                embedded:true,\r\n                address:accountAddress,\r\n                pageNumber: pageNumber,\r\n                pageSize: pageSize,\r\n            }\r\n        ).toPromise();\r\n        return result;\r\n    }\r\n\r\n\r\n\r\n    // ネームスペースからアドレスへの変換\r\n    public async getAddressByNamespace( namespaceId:NamespaceId ){\r\n\r\n        let address = '';\r\n\r\n        // 16進文字列からバイト配列への変換\r\n        const hexToBytes = (hex: string): Uint8Array =>  {\r\n            const byteCount = hex.length / 2;\r\n            const byteArray = new Uint8Array(byteCount);\r\n        \r\n            for (let i = 0; i < byteCount; i++) {\r\n                const byte = parseInt(hex.substr(i * 2, 2), 16);\r\n                byteArray[i] = byte;\r\n            }\r\n        \r\n            return byteArray;\r\n        }\r\n\r\n        const url = this._nodeUrl + '/namespaces/' + namespaceId.id.toHex();\r\n\r\n        // 対象ネームスペースIDをノードに問い合わせ\r\n        return await axios.get(url)\r\n        .then(function (response: any) {\r\n\t        //console.log(response.data);\r\n            const rawAddress = response.data.namespace.alias.address\r\n            address = base32Encode( hexToBytes(rawAddress), 'RFC4648', { padding: false });\r\n\t    })\r\n        .catch(function (error: any) {\r\n\t\t    console.log(\"*** error ***\")\r\n\t\t    console.log(error)\r\n\t\t})\r\n\t    .then(function () {\r\n\t\t    //console.log (\"*** 終了 ***\")\r\n            //console.log(address)\r\n            return address;\r\n\t\t})        \r\n    }\r\n\r\n    // ネームスペースIDからネームスペース名を取得\r\n    public async getNamespaceName( namespaceId:NamespaceId){\r\n\r\n        // ネームスペース名の取得\r\n        const repositoryFactory = new RepositoryFactoryHttp(this._nodeUrl);\r\n        const nameRepo = repositoryFactory.createNamespaceRepository();\r\n        const names = await nameRepo.getNamespacesNames([namespaceId]).toPromise()\r\n        const fullName = names?.at(0)?.name ?? ''\r\n\r\n        return fullName;\r\n    }\r\n\r\n    // AccountInfoの取得\r\n    public async getAddress( address:string ){\r\n        return await Address.createFromRawAddress(address);\r\n    }\r\n\r\n    // MosaciInfoの取得\r\n    public async getMosaicInfo( mosaicId:MosaicId ){\r\n\r\n        const repositoryFactory = new RepositoryFactoryHttp(this._nodeUrl);\r\n        const mosaicHttp = repositoryFactory.createMosaicRepository();\r\n\r\n        let info = await mosaicHttp.getMosaic(mosaicId).toPromise();\r\n\r\n        return info;\r\n\r\n    }\r\n\r\n    public async getMosaicInfoByStr( id:string){\r\n\r\n        const mosaicid = new MosaicId( id )\r\n        const repositoryFactory = new RepositoryFactoryHttp(this._nodeUrl);\r\n        const mosaicHttp = repositoryFactory.createMosaicRepository();\r\n\r\n        let info = await mosaicHttp.getMosaic(mosaicid).toPromise();\r\n\r\n        return info;\r\n\r\n    }\r\n\r\n    // ネームスーペースからアドレス変換のテスト\r\n    public async convertNamespace(){\r\n        const list = \r\n        ['mitsuo7777',\r\n        'kogee',\r\n        'crypto',\r\n        'yuki',\r\n        'marron',\r\n        'melonsoda',\r\n        'mii',\r\n        'kuchibashi',\r\n        'akamikko',\r\n        'shizuilab',\r\n        'cat',\r\n        'wecanch',\r\n        'symbolblog',\r\n        'kamome',\r\n        'ninelives',\r\n        'poppoppo',\r\n        'usagi',\r\n        'villhell',\r\n        'radio',\r\n        'mash',\r\n        'teria',\r\n        'tokenlive',\r\n        'hanabatake',\r\n        'yurei',\r\n        'kotopapa',\r\n        'pasomi',\r\n        'neluta',\r\n        'eip',\r\n        'onem',\r\n        'nononon',\r\n        'karriz',\r\n        'xrpl',\r\n        'tochio',\r\n        'sy1000mg',\r\n        'cryptobeliever',\r\n        'narikin',\r\n        'matsuoka',\r\n        'bootarou',\r\n        'enako',\r\n        'boceck',\r\n        'katsutarou',\r\n        'yobi',\r\n        'butuyokuman',\r\n        'toshi',\r\n        'farfan',\r\n        'honanem',\r\n        'nonki71',\r\n        'shizuilab',\r\n        'fukurou',\r\n        'n1040',\r\n        'mikun_nem',\r\n        'hainetu',\r\n        'curupo',\r\n        'kyokot']\r\n\r\n        // ネームスペース情報取得用\r\n        const repositoryFactory = new RepositoryFactoryHttp(this._nodeUrl);\r\n        const nameRepo = repositoryFactory.createNamespaceRepository();\r\n\r\n        let i=0;\r\n\r\n        let result = ''\r\n\r\n        for( const name of list){\r\n\r\n            const namespaceid = new NamespaceId( name );\r\n\r\n            console.log( name + ':' + namespaceid.toHex() )\r\n\r\n            // ネームスペースがアドレスに紐づいてるかチェック\r\n            await nameRepo.getNamespace(namespaceid).subscribe(\r\n                (info) => {\r\n                    if( info.active == true && info.alias.type == 2){\r\n                        console.log(name + ':' + info.alias.address?.plain() )\r\n                    }else{\r\n                        console.log( name + ': not active or no alias')\r\n                    }\r\n                },\r\n                ( err ) => console.log( console.log( name + ':err') )\r\n            )\r\n        }\r\n    }\r\n\r\n}","import React, { useLayoutEffect, useState } from 'react';\r\n\r\nconst useWindowSize = (): number[] => {\r\n  const [size, setSize] = useState([0, 0]);\r\n  useLayoutEffect(() => {\r\n    const updateSize = (): void => {\r\n      setSize([window.innerWidth, window.innerHeight]);\r\n    };\r\n\r\n    window.addEventListener('resize', updateSize);\r\n    updateSize();\r\n\r\n    return () => window.removeEventListener('resize', updateSize);\r\n  }, []);\r\n  return size;\r\n};\r\n\r\nexport default useWindowSize;","import * as React from 'react';\r\nimport { styled, alpha, createTheme, ThemeProvider } from '@mui/material/styles';\r\nimport * as fs from \"fs\"\r\nimport axios from 'axios'\r\n\r\nimport CssBaseline from '@mui/material/CssBaseline';\r\nimport MuiDrawer from '@mui/material/Drawer';\r\nimport Box from '@mui/material/Box';\r\nimport MuiAppBar, { AppBarProps as MuiAppBarProps } from '@mui/material/AppBar';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport List from '@mui/material/List';\r\nimport Typography from '@mui/material/Typography';\r\nimport Divider from '@mui/material/Divider';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Badge from '@mui/material/Badge';\r\nimport Container from '@mui/material/Container';\r\nimport Grid from '@mui/material/Grid';\r\nimport Paper from '@mui/material/Paper';\r\nimport Link from '@mui/material/Link';\r\nimport MenuIcon from '@mui/icons-material/Menu';\r\nimport ChevronLeftIcon from '@mui/icons-material/ChevronLeft';\r\nimport NotificationsIcon from '@mui/icons-material/Notifications';\r\nimport { mainListItems, secondaryListItems } from './listItems';\r\nimport SearchIcon from '@mui/icons-material/Search';\r\nimport InputBase from '@mui/material/InputBase';\r\n\r\nimport NetworkGraph from './NetworkGraph';\r\nimport ElementDetailInfo from './ElementDetailInfo';\r\nimport Deposits from './Deposits';\r\nimport Orders from './Orders';\r\nimport FormDialog from './FormDialog';\r\nimport Title from './Title';\r\nimport { useRecentTransactions } from '../symbol/useRecentTransactions';\r\n\r\nimport { ElementDefinition } from \"cytoscape\";\r\n\r\nimport {SymbolManager} from '../symbol/SymbolManager'\r\nimport useWindowSize from '../hooks/useWindowSize'\r\n\r\n// コピーライト\r\nfunction Copyright(props: any) {\r\n  return (\r\n    <Typography variant=\"body2\" color=\"text.secondary\" align=\"center\" {...props}>\r\n      {'Copyright © '}\r\n      <Link color=\"inherit\" href=\"https://twitter.com/kurikou_XymCity\">\r\n        @kurikou_XymCity\r\n      </Link>{' '}\r\n      {new Date().getFullYear()}\r\n      {'.'}\r\n    </Typography>\r\n  );\r\n}\r\n\r\nconst drawerWidth: number = 240;\r\n\r\n\r\ninterface AppBarProps extends MuiAppBarProps {\r\n  open?: boolean;\r\n}\r\n\r\n// 上部メニューバー\r\nconst AppBar = styled(MuiAppBar, {\r\n  shouldForwardProp: (prop) => prop !== 'open',\r\n})<AppBarProps>(({ theme, open }) => ({\r\n  zIndex: theme.zIndex.drawer + 1,\r\n  transition: theme.transitions.create(['width', 'margin'], {\r\n    easing: theme.transitions.easing.sharp,\r\n    duration: theme.transitions.duration.leavingScreen,\r\n  }),\r\n  ...(open && {\r\n    marginLeft: drawerWidth,\r\n    width: `calc(100% - ${drawerWidth}px)`,\r\n    transition: theme.transitions.create(['width', 'margin'], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  }),\r\n}));\r\n\r\n// 検索フォーム\r\nconst Search = styled('div')(({ theme }) => ({\r\n    position: 'relative',\r\n    borderRadius: theme.shape.borderRadius,\r\n    backgroundColor: alpha(theme.palette.common.white, 0.15),\r\n    '&:hover': {\r\n      backgroundColor: alpha(theme.palette.common.white, 0.25),\r\n    },\r\n    marginLeft: 0,\r\n    width: '100%',\r\n    [theme.breakpoints.up('sm')]: {\r\n      marginLeft: theme.spacing(1),\r\n      width: 'auto',\r\n    },\r\n  }));\r\n\r\n  const SearchIconWrapper = styled('div')(({ theme }) => ({\r\n    padding: theme.spacing(0, 2),\r\n    height: '100%',\r\n    position: 'absolute',\r\n    pointerEvents: 'none',\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n  }));\r\n\r\n  const StyledInputBase = styled(InputBase)(({ theme }) => ({\r\n    color: 'inherit',\r\n    '& .MuiInputBase-input': {\r\n      padding: theme.spacing(1, 1, 1, 0),\r\n      // vertical padding + font size from searchIcon\r\n      paddingLeft: `calc(1em + ${theme.spacing(4)})`,\r\n      transition: theme.transitions.create('width'),\r\n      width: '100%',\r\n      [theme.breakpoints.up('sm')]: {\r\n        width: '25ch',\r\n        '&:focus': {\r\n          width: '40ch',\r\n        },\r\n      },\r\n    },\r\n  }));\r\n\r\n  // 開閉ドロワーメニュー\r\nconst Drawer = styled(MuiDrawer, { shouldForwardProp: (prop) => prop !== 'open' })(\r\n  ({ theme, open }) => ({\r\n    '& .MuiDrawer-paper': {\r\n      position: 'relative',\r\n      whiteSpace: 'nowrap',\r\n      width: drawerWidth,\r\n      transition: theme.transitions.create('width', {\r\n        easing: theme.transitions.easing.sharp,\r\n        duration: theme.transitions.duration.enteringScreen,\r\n      }),\r\n      boxSizing: 'border-box',\r\n      ...(!open && {\r\n        overflowX: 'hidden',\r\n        transition: theme.transitions.create('width', {\r\n          easing: theme.transitions.easing.sharp,\r\n          duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n        width: theme.spacing(7),\r\n        [theme.breakpoints.up('sm')]: {\r\n          width: theme.spacing(9),\r\n        },\r\n      }),\r\n    },\r\n  }),\r\n);\r\n\r\n// テーマ設定用\r\nconst isDarkMode = false;\r\nconst mdTheme = createTheme({\r\n  // フォントサイズを小さめに調整\r\n  typography: {\r\n    fontSize: 12,\r\n    button: {\r\n      textTransform: \"none\"\r\n    },\r\n  },\r\n  // カラーテーマ設定\r\n  palette: {\r\n    mode: 'light',\r\n    primary: {\r\n      main: '#4E2C70',\r\n      contrastText: '#FFFFFF',\r\n    },\r\n    background: {\r\n      default: '#bdbdbd',\r\n    },\r\n  },  \r\n});\r\n\r\n// 不要な再描画を抑えるためにMemo化する処理\r\n//（渡しているPropsに変化がない場合は再描画されない）\r\nconst MemoNetworkGraph = React.memo(NetworkGraph);\r\nconst MemoFormDialog = React.memo(FormDialog);\r\nconst MemoElementDetailInfo = React.memo(ElementDetailInfo);\r\n\r\n// 投げXYMタウンリストの型定義\r\nexport type Residents = {\r\n  name:string,\r\n  twitter:string,\r\n  image:string,\r\n  address:string\r\n};\r\n\r\n// 投げXYMタウンリストの型定義\r\ntype SheetResponse = {\r\n  majorDimension:string,\r\n  range:string,\r\n  values:[]\r\n};\r\n\r\n// 全角文字判定\r\nfunction containsZenkaku(str: string): boolean {\r\n  // 全角文字が含まれているかどうかを判定する正規表現\r\n  const zenkakuRegexp = /[^\\x01-\\x7E]/; // 0x01-0x7Eは半角文字の範囲\r\n\r\n  return zenkakuRegexp.test(str);\r\n}\r\n\r\n// 投げXYMタウンリストのスプレッドシート読込\r\nasync function readSpreadsheets(){\r\n\r\n  const url = 'https://sheets.googleapis.com/v4/spreadsheets/1FgaTWWvIBk0f0U2aQ08oz69s4SmpJGiRmezlL2Q62nw/values/sheet1?key=AIzaSyBriz6kRinIhG2knJ2LIfEfoDCILECcyBU'\r\n\r\n  // APIでSymbolタウンリストを読み込む\r\n  let list:SheetResponse;\r\n  return await axios.get(url)\r\n  .then(function (response: any) {\r\n    list = response.data;\r\n  })\r\n    .catch(function (error: any) {\r\n    console.log(\"*** error ***\")\r\n    console.log(error)\r\n  })\r\n  .then(function () {\r\n    console.log (\"*** 終了 ***\")\r\n    return list;\r\n  })      \r\n\r\n}\r\n\r\n// CSVファイルを読み込む関数\r\nfunction readCSVFile(filePath: string): string[] {\r\n  const fileData = fs.readFileSync(filePath, 'utf-8');\r\n  return fileData.split('\\n');\r\n}\r\n\r\n// 1行ずつデータを処理する関数\r\nfunction processDataLine(line: string): void {\r\n  const data = line.split(',');\r\n  // TODO: データの処理を行う\r\n  console.log(data);\r\n}\r\n\r\n// メインコンポーネント\r\nfunction DashboardContent() {\r\n\r\n  /*\r\n   * State定義\r\n   */\r\n  // ウィンドウサイズ\r\n  const [width, height] = useWindowSize();\r\n\r\n  // トグルドロワーの開閉状態\r\n  const [open, setOpen] = React.useState(false);\r\n  const toggleDrawer = () => {\r\n    setOpen(!open);\r\n  };\r\n  // グラフのモード（アカウント検索 or モザイク検索）\r\n  const [graphMode, setGraphMode] = React.useState('Account')\r\n  // ユーザ入力（ウォレットアドレス or モザイクID）\r\n  const [inputProp, setInputProp] = React.useState('')\r\n  // 検索オプション\r\n  const [includeAggregateOpt, setAggregateOpt] = React.useState(false)\r\n  const [pageNumberOpt, setPageNumberOpt] = React.useState(1)\r\n  const [pageSizeOpt, setPageSizeOpt] = React.useState(100)\r\n  const [pageLimitOpt, setPageLimitOpt] = React.useState(1)\r\n\r\n  // 読み込み画面制御用State\r\n  const [isProgress,setIsProgress] = React.useState(false);\r\n  // グラフ描画データ\r\n  const [graphElements, setGraphElements] = React.useState<ElementDefinition[]>([]);\r\n  // グラフ描画領域のサイズ\r\n  const [graphCanvasSize, setGraphCanvasSize] = React.useState( {width: 100, height: 100 })\r\n\r\n  // 選択したグラフエレメント情報\r\n  const [ elementData, setElementData ] = React.useState({})\r\n  // グラフエレメントクリック時処理\r\n  // ※UseStateを使うと更新時に毎回グラフの再描画が走るので、UseCallbackを使う\r\n  const getElement = React.useCallback( ( data ) => {\r\n    setElementData( data );\r\n  },[])\r\n\r\n  // 投げXYMタウンリスト\r\n  const [symbolTownList, setSymbolTownList] = React.useState<Residents[]>([])\r\n  const [townListIndex, setTownListIndex] = React.useState<{ [key:string]: number }>({})\r\n\r\n  // Symbol管理クラス\r\n  const [symbolManager, setSymbolManager] = React.useState<SymbolManager>( new SymbolManager() );\r\n\r\n  // 初回実行時処理 -> 投げXYMタウンリストを読み込み\r\n  React.useEffect(() => {\r\n  \r\n    async function getSymbolTownList(){\r\n      const list = await readSpreadsheets();\r\n      // 投げXYMタウンリストを保持\r\n      setSymbolTownList( list.values );\r\n\r\n      // 検索用インデックスリストを作成\r\n      let indexList:{ [key:string]: number } = {}\r\n      for( let idx=0; idx < list.values.length; idx++){\r\n        // アドレスが空白または全角混じりならスキップ\r\n        const val = list.values[idx];\r\n        if( containsZenkaku(val[3]) != false || val[3] == '' ){\r\n          continue\r\n        }\r\n        indexList[ val[3] ] =  idx;\r\n      }\r\n      console.log( indexList )\r\n      setTownListIndex( indexList );\r\n    }\r\n    getSymbolTownList();\r\n\r\n    // テスト用：リストのネームスペースをすべてアドレスに変換\r\n    /*\r\n    async function convertAddress(){\r\n      symbolManager.convertNamespace()\r\n    }\r\n    convertAddress();\r\n    */\r\n\r\n    // モザイク情報取得と表示のテスト\r\n    async function mosaicTest(){\r\n      const info = await symbolManager.getMosaicInfoByStr( '71C8C78201C17DB6' )\r\n      console.log( info )\r\n    }\r\n    mosaicTest()\r\n\r\n\r\n  }, []);\r\n\r\n  // ウィンドウサイズ変化時の処理\r\n  // グラフ描画コンポーネントへの参照をuseRefで持つ\r\n  // ウィンドウサイズが変わったらグラフ描画キャンバスのサイズも調整\r\n  const elm = React.useRef<HTMLInputElement>(null);\r\n  React.useEffect(() => {\r\n    if( elm.current != null){\r\n      // 対象コンポーネントのDOM要素情報取得\r\n      const elm_data =  JSON.parse(JSON.stringify(elm.current.getBoundingClientRect()));\r\n      // 余白分調整\r\n      const padding_x = 16 * 2;\r\n      const padding_y = (56 + (16.5 * 2) + (16 * 1));\r\n      // グラフ描画エリアのサイズ更新\r\n      setGraphCanvasSize( { width:elm_data.width - padding_x, height:elm_data.height-padding_y })\r\n    }\r\n  }, [width, height]);\r\n\r\n  // ユーザ入力と設定値の更新時処理（ユーザ入力受け取り時処理）\r\n  React.useEffect(() => {\r\n    // グラフ描画データ生成処理の呼び出し\r\n    // useEffect自体ではasyncの関数を受け取れないので内部で関数を定義して呼び出す。\r\n    const getElements = async (graphMode:string, pageNumber:number, pageSize:number, pageLimit:number, includeAggregate:boolean ) =>{\r\n      // グラフ描画モード：アカウントモードの場合\r\n      if( graphMode == 'Account'){\r\n        // 読み込み中画面を表示\r\n        setIsProgress(true);\r\n        // トランザクション履歴からグラフ用データ生成\r\n        const elements:ElementDefinition[] = await symbolManager.makeElementsByRecentTransactions(pageNumber, pageSize, pageLimit, includeAggregate, symbolTownList, townListIndex); \r\n        // 読み込み中画面を非表示\r\n        setIsProgress(false);\r\n        // グラフ描画データの更新\r\n        setGraphElements(elements);\r\n      }else{\r\n      // グラフ描画モード：モザイクモードの場合\r\n        console.log('モザイクモード！');\r\n      } \r\n    } \r\n\r\n    // ユーザ入力の受け取り( 空なら何もしない )\r\n    if( inputProp != ''){\r\n      \r\n      // TODO: 入力値のバリデーション処理\r\n      // TODO: モザイクID受け取った場合の受け取り方（管理クラスに変数追加）\r\n      symbolManager.address = inputProp;\r\n      getElements(graphMode, pageNumberOpt, pageSizeOpt, pageLimitOpt, includeAggregateOpt );\r\n    \r\n    }\r\n  }, [graphMode, inputProp,pageNumberOpt,pageSizeOpt,pageLimitOpt, includeAggregateOpt]);\r\n\r\n\r\n  // 出力\r\n  return (\r\n    <ThemeProvider theme={mdTheme}>\r\n      <Box sx={{ display: 'flex' }}>\r\n        <CssBaseline />\r\n\r\n        {/* 上部ツールバー */}\r\n        <AppBar position=\"absolute\" open={open}>\r\n          <Toolbar\r\n            sx={{\r\n              pr: '24px', // keep right padding when drawer closed\r\n            }}\r\n          >\r\n            {/* タイトル文字列 */}\r\n            <Typography\r\n              component=\"h1\"\r\n              variant=\"h6\"\r\n              color=\"inherit\"\r\n              noWrap\r\n              sx={{ flexGrow: 1 }}\r\n            >\r\n              Symbol Network Graph\r\n            </Typography>\r\n\r\n            <Paper>\r\n            <MemoFormDialog \r\n                setGraphMode={setGraphMode}\r\n                setInputProp={setInputProp}\r\n                setAggregateOpt={setAggregateOpt}\r\n                setPageNumberOpt={setPageNumberOpt}\r\n                setPageSizeOpt={setPageSizeOpt}\r\n                setPageLimitOpt={setPageLimitOpt}/>\r\n            </Paper>\r\n\r\n            {/* 検索フォーム */}\r\n            {/* TODO: 検索フォーム実装する */}\r\n            {/*}\r\n            <Search>\r\n              <SearchIconWrapper>\r\n                <SearchIcon />\r\n              </SearchIconWrapper>\r\n              <StyledInputBase\r\n                placeholder=\"Address/MosaicId…\"\r\n                inputProps={{ 'aria-label': 'search' }}\r\n              />\r\n            </Search>\r\n          　{*/}\r\n\r\n          </Toolbar>\r\n        </AppBar>\r\n        \r\n        <Box\r\n          component=\"main\"\r\n          sx={{\r\n            backgroundColor: (theme) =>\r\n              theme.palette.mode === 'light'\r\n                ? theme.palette.grey[100]\r\n                : theme.palette.grey[900],\r\n            flexGrow: 1,\r\n            height: '100vh',\r\n            overflow: 'auto',\r\n          }}\r\n        >\r\n\r\n          <Toolbar/>\r\n\r\n          <Container maxWidth=\"xl\" sx={{ mt: 2, mb: 2 }}>\r\n\r\n            <Grid container spacing={2}>\r\n              {/* グラフ表示エリア */}\r\n              <Grid item xs={10}>\r\n                <Paper ref={elm} sx={{ p: 2, display: 'flex', flexDirection: 'column', height: 900, }}>\r\n                  <MemoNetworkGraph elements={graphElements} isProgress={isProgress} graphCanvasSize={graphCanvasSize} getElement={getElement} />\r\n                </Paper>\r\n              </Grid>\r\n\r\n              {/* 詳細表示エリア */}\r\n              <Grid item xs={2}>\r\n                <Paper\r\n                  sx={{\r\n                    p: 2,\r\n                    display: 'flex',\r\n                    flexDirection: 'column',\r\n                    height: 900,\r\n                  }}\r\n                >\r\n                  <MemoElementDetailInfo elementData={elementData} symbolManager={symbolManager} />\r\n                </Paper>\r\n              </Grid>\r\n\r\n\r\n            </Grid>\r\n            <Copyright sx={{ pt: 4 }} />\r\n          </Container>\r\n        </Box>\r\n      </Box>\r\n    </ThemeProvider>\r\n  );\r\n}\r\n\r\nexport default function Dashboard() {\r\n  return <DashboardContent />;\r\n}","import React from 'react';\r\nimport DashboardContent from './components/Dashboard';\r\n\r\nconst App = () =>  {\r\n  return <DashboardContent />;\r\n};\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nconst root = ReactDOM.createRoot(\r\n  document.getElementById('root') as HTMLElement\r\n);\r\nroot.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}